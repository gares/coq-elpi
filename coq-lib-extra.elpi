/* coq-elpi: Coq terms as the object language of elpi                        */
/* license: GNU Lesser General Public License Version 2.1 or later           */
/* ------------------------------------------------------------------------- */

% This code needs cleanup and scrutiny

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% extra typing declarations %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

type indc string -> term.
type indt string -> term.

%%%%%%%%%%%%%%%%%%%
% generic helpers %
%%%%%%%%%%%%%%%%%%%

% (abstract T Args Prod T') <-> (subst-lam Args T' T)
% and T' starts with the (size Args) first products of Prod
pred abstract i:term, i:(list term), i:term, o:term.
% @log(abstract T Args Prod Lam).
abstract T [] _ T' :- !, copy T T'.
abstract T [X|XS] (prod N Ty Tys) (lam N Ty R) :- !,
  pi x\ copy X x => abstract T XS (Tys x) (R x).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Perm functions are not used anymore. %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%unused
pred perm-op i:(@name -> term -> (term -> term) -> term),
     i:(list A -> list A -> prop), i:int, i:term, o:term.
perm-op Op Perm Nb (Op N T B) (Op N' T' B') :- !,
  perm-op-aux Op Perm Nb (Op N T B) [] (Op N' T' B') [].

%unused
pred perm-op-aux i:(@name -> term -> (term -> term) -> term),
     i:(list A -> list A -> prop), i:int,
     i:term, i:(list (pair (pair @name term) term)),
     o:term, o:(list (pair (pair @name term) term)).
%@log(perm-op-aux _ _ _ _ _ _ _).
perm-op-aux Op Perm Nb (Op N T B) Acc (Op N' T' B') Acc' :- Nb > 0, !,
  Nb' is Nb - 1,
  (pi x\
    perm-op-aux Op Perm Nb' (B x) [pr (pr N T) x|Acc] (B' x) (Acc'x x),
    Acc'x x = [pr (pr N' T') x|Acc']).
perm-op-aux _Op Perm 0 B Acc B' Acc'' :- !,
  Perm {rev Acc} RevAcc', rev RevAcc' Acc',
  % $coq.say "Acc=" Acc, $coq.say "Acc'=" Acc',
  map2 Acc Acc' (a\ a'\ res\ sigma X Y TX TY\
    a = pr TX X, a' = pr TY Y,
    res = (copy Y X :- !)) Rename,
  % $coq.say "Rename=" Rename,
  % $coq.say "B=" B,
  Rename => (
    copy B B',
    % $coq.say "B'=" B',
    map2 Acc Acc'
      (a\ a'\ res\ sigma X Y NX NY TX TY TY'\
      a = pr (pr NX TX) X, a' = pr (pr NY TY) Y,
      copy TY TY', res = pr (pr NY TY') X) Acc'').
  %$coq.say "Acc''=" Acc''

%unused
pred eta-perm i:(list A -> list A -> prop), i:int,
  i:term, i:term, o:term, o:term.
eta-perm Perm Nb P B P' B' :- !,
  mk-eta Nb P B EtaB, !,
  perm-op prod Perm Nb P P', !,
  perm-op lam Perm Nb EtaB B'.

%unused
pred let-perm i:(list A -> list A -> prop), i:int,
  i:@name, i:term, i:term, o:((term -> term) -> term).
let-perm Perm Nb Name Ty X (let Name Ty' X') :- !,
  eta-perm Perm Nb Ty X Ty' X'.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Making a trivial match i.e. matching on a value and applying the same %
% function to the various (fully applied constructors).		        %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

pred mk-trivial-match i:int, i:term, i:list term, i:term, o:term.
%@log(mk-trivial-match _ _ _ _ _).
mk-trivial-match Rno Prod Args F (lam N T B) :- Rno > 0, !,
  unwind {whd Prod []} (prod N T P), Rno' is Rno - 1,
  (pi x \ mk-trivial-match Rno' (P x) [x|Args] F (B x)).
mk-trivial-match 0 Prod Args F Match :- !,
  unwind {whd Prod []} (prod N T P), !,
  (pi x\ rev [x|Args] (RArgs x)), !,
  safe-dest-app T (indt Name) IndArgs, !,
  coq.env.indt Name _ Lno _Luno IndArity KNames KTypes, !,
  split-at Lno IndArgs LIndArgs RIndArgs, !,
  subst-prod LIndArgs IndArity RIndArity, !,
  abstract (lam N T P) RIndArgs RIndArity MatchType, !,
  (AbsF = x\ {abstract {mk-app F (RArgs x)} RIndArgs RIndArity}), !,
  map KNames (k\ subst-lam LIndArgs k) RKs, !,
  map KTypes (subst-prod LIndArgs) RKTypes, !,
  map2 RKs RKTypes (mk-branch-lams Lno T AbsF) Branches, !,
  Match = (lam N T x \ match x MatchType Branches).

pred mk-branch-lams i:int, i:term, i:(term -> term), i:term, i:term, o:term.
% @log(mk-branch-lams _ _ _ _ _).
mk-branch-lams Lno T F K (prod N Ty P) (lam N Ty B1) :- !,
  (pi x\ mk-branch-lams Lno T F {subst-lam [x] K} (P x) (B1 x)).
mk-branch-lams Lno _ F K P Let :- !,
  safe-dest-app P _ ParamIndexes, !,
  split-at Lno ParamIndexes _Param Indexes, !,
  (Let = let `K` P K x\ {subst-lam Indexes (F x)}).
