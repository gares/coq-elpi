/* Refinement tactic for CoqEAL                                              */
/* license: GNU Lesser General Public License Version 2.1 or later           */
/* ------------------------------------------------------------------------- */

% very WIP

pred last i:list A, o:list A, o:A.
last [X] [] X :- !.
last [X|XS] [X|YS] Last :- !, last XS YS Last.

pred easy o:term, o:term, i:term, o:term.

pred refines o:term, i:term, o:term, o:term. % rel, t1, t2, proof
% @log(refines _ _ _ _).
refines R T1 T2 P :- easy P R T1 T2, !.
  % P = const GR,
  % $coq.say "found P=" P,
  % coq.env.typeof-gr GR CoqTyGR,
  % $coq.say "CoqTyGR =" CoqTyGR,
  % $coq.say (app[{{@refines}},_,_,R,_,T2]),
  % CoqTyGR = app [{{@refines}},_,_,R,_,T2].
  % $coq.say "R =" R.
%  of P PTY _,
%  unify-eq PTY {of {{refines lp:R _ lp:T2}} _}.
refines R (app [F | Args]) T2 P :-
  last Args LeftArgs LastArg,
  mk-app F LeftArgs G,
  refines (app [{{@hrespectful}}, _, _, _ ,_ , RArg, R]) G RG PG, !,
  refines RArg LastArg RLastArg PLastArg,
  P = {{refines_apply lp:PLastArg lp:PG}},
  mk-app RG [RLastArg] T2.


solve [goal Ev (app[{{@refines}}, _Src, _Tgt, Rel, T1, T2])  _] :-
  % $coq.say "we refine " T1,
  if (time (with-TC {{@refines}} mk-easy (refines Rel T1 X P)) Time)
    (
     % $coq.say "we obtain " X " and proof " P,
     time (coq.elaborate X T2 _) Time2,
     % coq.evd-print,
     % coq.say "and the proof",
     time (coq.elaborate P Ev _) Time3,
     $coq.say "Time1=" Time "Time2=" Time2 "Time3=" Time3)
    ($coq.error "can't refine" {coq.term->string T1}).

pred mk-easy i:term, i:term, o:prop.
% @log(mk-easy _ _ _).
mk-easy Instance (prod N T F) (pi Concl) :- !,
   pi x \ mk-easy {mk-app Instance [x]} (F x) (Concl x).
mk-easy Instance (app [{{@refines}},_,_,Rel,Index,Result])
   (easy Instance Rel Index Result).

% coq.locate ""refines"" (const GR),
%                  coq.TC.db-for GR L.

% We disable coq-refiner
:before "coq-declare-evar"
  coq-declare-evar Ev Ty :- !, coq-evar Ev Ty.

:before "coq-declare-goal"
  coq-declare-goal Ev Ty G :- !, coq-evar Ev Ty, G Ev Ty.

% vim:set ft=lprolog spelllang=:
