/* Tentative framework for derivations on polynomial types                   */
/* License: GNU Lesser General Public License Version 2.1 or later           */
/* ------------------------------------------------------------------------- */

% Author: Luc Chabassier

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Utilities %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% max X Y Z
%      i i o
type max int -> int -> int -> prop.
max X Y Y :-
    X < Y.
max X Y X :-
    not (X < Y).

%% same-root X Y
%            i i
% Resolves only if the two terms are application of the same function/constructor
type same-root term -> term -> prop.
same-root X X.
same-root X (app [Y|_]) :- same-root X Y.
same-root (app [X|_]) Y :- same-root X Y.

%% do-apply T Params Out
%           i i      o
% Do the beta reduction of app [T|Params] (only on Params, does not beta reduce
% T)
type do-apply term -> list term -> term -> prop.
do-apply (lam _ _ Bo) [T|Ts] Out :-
    do-apply (Bo T) Ts Out.
do-apply (prod _ _ Bo) [T|Ts] Out :-
    do-apply (Bo T) Ts Out.
do-apply Out [] Out.

%% flip Prop Out
%       i    o
% Same as Haskell's flip but for propositions
type flip (A -> B -> C -> prop) -> B -> A -> C -> prop.
flip F B A C :-
    F A B C.

%% mconst X Y Z
%         i i o
% (mconst j) is the proposition constant to j
type mconst A -> B -> A -> prop.
mconst X _ X.

%% repeat N X L
%         i i o
% Output the list of X repeated N times
repeat 0 X [].
repeat N X [X|L] :-
    N1 is N - 1,
    repeat N1 X L.

repeat-test :-
    (pi a\ repeat 42 a (Out a)),
    coq.say Out.

%% uncons-last L L' Last
%              i o  o
type uncons-last list A -> list A -> A -> prop.
uncons-last [] _ _ :-
    fatal-error "uncons-last used on empty list".
uncons-last L L' Last :-
    uncons-last-acc L [] L' Last.
uncons-last-acc [X] Acc L' X :-
    rev Acc L'.
uncons-last-acc [X|L] Acc L' Last :-
    uncons-last-acc L [X|Acc] L' Last.

%% split-app App (pr Fun Args)
%            i   o
% Takes applications (potentially nested) and identify the function and its
% list of arguments
split-app (app [X|L]) (pr Fun Args) :-
    split-app X (pr Fun Args'),
    append Args' L Args.
split-app X (pr X []).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% API %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

type params  string -> int -> prop.
type phi     string -> term -> list term -> term -> term -> prop.
type doConst string -> term -> term -> term -> prop.
type doLeaf  string -> term -> term -> term -> term -> prop.
type doType  string -> term -> term -> term -> term -> term -> prop.
type doCon   string -> term -> term -> term -> term -> term -> term -> prop.
type doInl   string -> term -> term -> term -> term -> term -> prop.
type doInr   string -> term -> term -> term -> term -> term -> prop.
type doPair  string -> term -> term -> term -> term -> term -> term -> prop.
type doUnit  string -> term -> term -> prop.

%% derive Name TName Out TOut
%         i    i     o   o
%   Name : the name of the generator
%   TName : the name of the type we want to generate for
%   Out   : the body of the generated function
%   TOut  : the type of this function
type derive string -> string -> term -> term -> prop.
derive Name TName Bo TBo :-
    coq.locate TName Type,
    params Name Np,
    fixpoint Name Type Np Out _, !,
    expand-term Out Out', !,
    cleanup-term Out' Out'', !,
    coq.elaborate Out'' Bo TBo.

derive-test :-
    derive "eq" "MTree" Bo TBo,
    coq.env.add-const "MTree_equal" Bo TBo _ _.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%% Constructor conversion %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

kind constructor type.
type cinr  constructor -> constructor.
type cinl  constructor -> constructor.
type cprod constructor -> constructor -> constructor.
type ctype term -> constructor -> constructor.
type ccon  term -> constructor -> constructor.
type cvar  term -> constructor.
type cunit constructor.

type term-con       constructor -> term.
type term-sum-type  term -> term -> term.
type term-prod-type term -> term -> term.
type term-con-type  term -> term -> term.
type term-unit-type term.

type match-sum     term -> term -> term -> term.
type match-prod    term -> term -> term.
type uncon         term -> term -> term.
type abstract-type term -> term -> term -> term.
type lift1         (constructor -> constructor) -> term -> term.
type lift2         (constructor -> constructor -> constructor) -> term -> term -> term.

%% abstract-constructor Type LC C Params Out
%                       i    i  i i      o
%   Type   : the type we're abstracting one of the constructor
%   LC     : the list of constructors of the type (possibly partially applied)
%   C      : one of the constructor of the list
%   Params : the parameters of C used to build the instance of type
%   Out    : the corresponding instance of type constructor without the con
type abstract-constructor term -> list term -> term -> list term -> constructor -> prop.
abstract-constructor Type LC C Params (ctype Type Out) :-
    abstract-constructor-sum LC C Params Out.

%% abstract-constructor-sum LC C Params Out
%                           i  i i      o
%   LC     : the list of constructors of the type (possibly partially applied)
%   C      : one of the constructor of the list
%   Params : the parameters of C used to build the instance of type
%   Out    : the corresponding instance of type constructor without the con
type abstract-constructor-sum list term -> term -> list term -> constructor -> prop.
abstract-constructor-sum [C] Cs Params (ccon C Out) :-
    % Here we assume C = Cs
    abstract-constructor-pairs Params Out.
abstract-constructor-sum [C|LC] Cs Params (cinl (ccon C Out)) :-
    C = Cs,
    abstract-constructor-pairs Params Out.
abstract-constructor-sum [C|LC] Cs Params (cinr Out) :-
    not (C = Cs),
    abstract-constructor-sum LC Cs Params Out.

%% abstract-constructor-pairs Params Out
%                             i      o
%   Params : the parameters of the constructor
%   Out    : the parameters grouped in the form (cprod (cvar p1) (cprod ...))
type abstract-constructor-pairs list term -> constructor -> prop.
abstract-constructor-pairs [P] (cvar P).
abstract-constructor-pairs [P|Params] (cprod (cvar P) Out) :-
    abstract-constructor-pairs Params Out.
abstract-constructor-pairs [] cunit.

abstract-constructor-test :-
    coq.locate "LamC" Type, Type = indt GR,
    coq.env.indt GR tt _ _ TY LC _,
    (pi a b\ abstract-constructor Type LC {{Abs}} [a, b] (Out a b)),
    coq.say Out.

%% concretise-constructor Abs C Params
%                         i   o o
type concretise-constructor constructor -> term -> list term -> prop.
concretise-constructor (ctype Type X) (app [Head|NArgs]) Params :-
    concretise-constructor-sum X C Params,
    split-app C (pr Head Args),
    map Args (mconst hole) NArgs. % We don't know which type we're reconstructing

%% concretise-constructor-sum Abs C Params
%                             i   o o
concretise-constructor-sum (cinl (ccon C X)) C Params :-
    concretise-constructor-prod X Params.
concretise-constructor-sum (ccon C X) C Params :-
    concretise-constructor-prod X Params.
concretise-constructor-sum (cinr X) C Params :-
    concretise-constructor-sum X C Params.

%% concretise-constructor-prod Abs Params
%                              i   o
concretise-constructor-prod (cprod (cvar X) O) [X|O'] :-
    concretise-constructor-prod O O'.
concretise-constructor-prod (cvar X) [X].
concretise-constructor-prod cunit    [].

concretise-constructor-test :-
    coq.locate "LamC" Type,
    coq.locate "Abs" Cs,
    Term = (a\ b\ ctype Type (cinr (cinl (ccon Cs (cprod (cvar a) (cvar b)))))),
    (pi a b\ concretise-constructor (Term a b) (C a b) (P a b)),
    coq.say C,
    coq.say P.

%% get-type-information Tp Params Luno TY LC LT
%                       i  i      o    o  o  o
%   Tp     : a coq type potentially partially applied
%   Params : parameters for Tp
%   Luno   : number of uniform parameters
%   TY     : the type of app [Tp|Params]
%   LC     : the constructors of app [Tp|Params]
%   LT     : their types
get-type-information (app [X|Prs]) Params Luno TY LC LT :-
    append Prs Params Params',
    get-type-information X Params' Luno TY LC LT.
get-type-information (indt GR) Params Luno TY LC LT :-
    coq.env.indt GR tt _ Luno' TY' LC' LT',
    do-apply TY' Params TY,
    map LC' ((flip mk-app) Params) LC,
    map LT' ((flip do-apply) Params) LT,
    length Params L,
    Luno'' is Luno' - L,
    max Luno'' 0 Luno.

get-type-information-test :-
    coq.locate "LamC" Type,
    (pi a\ get-type-information (app [Type,a]) [] Luno (TY a) (LC a) (LT a)),
    coq.say Luno,
    coq.say TY,
    coq.say LC,
    coq.say LT.

%% make-abstract-type ITp OTp
%                     i   o
make-abstract-type ITp OTp :-
    get-type-information ITp [] _ _ LC LT,
    make-abstract-type-sum LC LT OTp.

%% make-abstract-type-sum LC LT Out
%                         i  i  o
%   LC  : the list of constructors of the type (possibly partially applied)
%   LT  : their types
%   Out : the type of the type considered in terms of sums of prods
make-abstract-type-sum [C] [T] (term-con-type C T1) :-
    make-abstract-type-prod {prod->lam T} T1.
make-abstract-type-sum [C|LC] [T|LT] (term-sum-type (term-con-type C T1) T2) :-
    make-abstract-type-prod {prod->lam T} T1,
    make-abstract-type-sum LC LT T2.

%% make-abstract-type-prod T Out
%                          i o
%   T   : its type
%   Out : its type in terms of prods
make-abstract-type-prod (lam N T Bo) Out :-
    (pi x\ make-abstract-type-prod (Bo x) T'),
    make-prod T T' Out.
make-abstract-type-prod _ term-unit-type.

make-prod T term-unit-type T.
make-prod T T' (term-prod-type T T').

make-abstract-type-test :-
    coq.locate "LamC" Type,
    make-abstract-type (app [Type, {{nat}}]) OTp,
    coq.say OTp.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%% Creating the type %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% derive-type Name Type TS Tp N TY
%              i    i    i  i  o o
% Builds the type of the derived function using the information in (phi Name)
% for the type Type, with arguments TS, with Tp being the type of Type (N is
% the index of the recursive argument for the fixpoint)
type derive-type string -> term -> list term -> term -> int -> term -> prop.
derive-type Name Type TS (lam N T Bo) Nn Out :-
    derive-type Name Type TS (prod N T Bo) Nn Out.
derive-type Name Type TS (prod N T Bo) Nn (prod N T Out) :-
    (pi t\ derive-type-acc Name Type t T (Bo t) TS [] [] Nn' (Out t)),
    Nn is Nn' + 1.
derive-type Name Type TS _ 0 (prod `a` Type Out) :-
    pi x\ phi Name Type TS x (Out x).

%% derive-type-acc Name Type P TP RTP TS Acc1 Acc2 N Out
%                  i    i    i i  i   i  []   []   o o
%   Name : the name of the description to use
%   Type : the type we're generating for, of kind * => K
%   P    : the parameters of Type
%   TP   : the type of P
%   RTP  : the type of app [Type,P]
%   TS   : the auxiliaries types of the generation, all of kind * => K
%   Acc1 : an accumulator of TS applied, should be set to []
%   Acc2 : an accumulator of the arguments of TS, should be set to []
%   N    : the index of the decreasing argument for the fixpoint
%   Out  : the type of the derivation for Type without the quantification on P
type derive-type-acc    string -> term -> term -> term -> term -> list term
                     -> list term -> list term -> int -> term -> prop.
derive-type-acc Name Type P TP RTP [T|TS] Acc1 Acc2 Nn (prod `Param` TP Out) :-
    (pi t\ derive-type-acc Name Type P TP RTP TS [app [T,t]|Acc1] [t|Acc2] Nn' (Out t)),
    Nn is Nn' + 1.
derive-type-acc Name Type P TP RTP [] Acc1' Acc2' Nn (prod `FParam` TY _\ TY') :-
    rev Acc1' Acc1, rev Acc2' Acc2,
    derive-type Name P Acc2 TP _ TY,
    derive-type Name (app [Type,P]) Acc1 RTP Nn' TY',
    Nn is Nn' + 1.

derive-type-test :-
    coq.locate "LamC" Type, Type = indt GR,
    coq.env.indt GR tt _ _ TY _ _,
    ((pi a t\ phi "eq" t _ a (prod `b` t _\ {{bool}}))
        => derive-type "eq" Type [] TY N Out),
    coq.say N,
    coq.say Out.

derive-type-test' :-
    coq.locate "LamC" Type, Type = indt GR,
    coq.env.indt GR tt _ _ TY _ _,
    ((pi a t t'\ phi "map" t [t'] a t')
        => derive-type "map" Type [Type] TY N Out),
    coq.say N,
    coq.say Out.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%% Fixpoint skeleton %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% rec-for-type Type TY Fun
%               i    o  o
type rec-for-type term -> term -> term -> prop.

%% fixpoint Name Type NTS Out TY
%           i    i    i   o   o
%   Name : the name of the generator
%   Type : the type we're generating for
%   NTS  : the number of parameters of the generator
%   Out  : the generated function
%   TOut : the type of Type
type fixpoint string -> term -> int -> term -> term -> prop.
fixpoint Name Type NTS Out TY :-
    repeat NTS Type TS,
    get-type-information Type [] Luno TY LC LT,
    fixpoint-acc Name Type Luno LC LT TS TY [] Out.

fixpoint-test :-
    coq.locate "LamC" Type,
    (pi f\ (pi t\ rec-for-type t _ f)
        => fixpoint "eq" Type 0 (Out f) _),
    (pi f\ expand-term (Out f) (Out' f)),
    coq.say Out'.

%% fixpoint-acc Name Type Luno LC LT TS TY Facc Out
%               i    i    i    i  i  i  i  i    o
%   Name : the name of the generator
%   Type : the type we're generating for
%   Luno : the number of uniform constructors of Type
%   LC   : the constructors of Type
%   LT   : their types
%   TS   : the parameters of the generator
%   TY   : the type of Type
%   Facc : an accumulator to create a function taking arguments of the type
%          in this accumulator
%   Out  : the recursive function we need to give to the fixpoint
type fixpoint-acc string -> term -> int -> list term -> list term
                  -> list term -> term -> list term -> term -> prop.
fixpoint-acc Name Type 0 LC LT TS TY Facc' (fix `Rec` Nn TF Out) :-
    rev Facc' Facc,
    (pi f\ abstract-over Facc f (Cmp f)),
    split-app Type (pr Head _),
    derive-type Name Type TS TY Nn TF,
    (pi f\ rec-for-type Head TY (Cmp f) =>
        fixpoint-function Name Type LC LT TS TY (Out f)).
fixpoint-acc Name Type Luno LC LT TS (prod N T Bo) Facc Out :-
    fixpoint-acc Name Type Luno LC LT TS (lam N T Bo) Facc Out.
fixpoint-acc Name Type Luno LC LT TS (lam N T Bo) Facc (lam N T Out) :-
    Luno' is Luno - 1,
    pi t\ fixpoint-acc' Name Type Luno' LC LT t T (Bo t) TS [] [] [T|Facc] (Out t).

%% abstract-over Lst Bo Out
%                i   i  o
% Takes a list of types and output a term taking arguments of the types in the
% list and returning Bo
abstract-over [L|Lst] Bo (lam _ L _\ Out) :-
    abstract-over Lst Bo Out.
abstract-over [] Bo Bo.

%% fixpoint-acc' Name Type Luno P TP RTP TS Acc1 Acc2 Facc Out
%                i    i    i    i i  i   i  []   []   i    o
%   Name : the name of the description to use
%   Type : the type we're generating for, of kind * => K
%   Luno : the number of uniform constructors of Type
%   P    : the parameter of Type
%   TP   : the type of P
%   RTP  : the type of app [Type,P]
%   TS   : the auxiliaries types of the generation, all of kind * => K
%   Acc1 : an accumulator of TS applied, should be set to []
%   Acc2 : an accumulator of the arguments of TS, should be set to []
%   Facc : an accumulator to create a function taking arguments of the type
%          in this accumulator
%   Out  : the type of the derivation for Type without the quantification on P
fixpoint-acc' Name Type Luno LC LT P TP RTP [T|TS] Acc1 Acc2 Facc (lam `UParam` TP Out) :-
    pi t\ fixpoint-acc' Name Type Luno LC LT P TP RTP TS [app [T,t]|Acc1] [t|Acc2] [TP|Facc] (Out t).
fixpoint-acc' Name Type Luno LC LT P TP RTP [] Acc1' Acc2' Facc (lam `UFParam` TY Out) :-
    rev Acc1' Acc1, rev Acc2' Acc2,
    derive-type Name P Acc2 TP _ TY,
    map LC ((flip mk-app) [P]) LC',
    map LT ((flip do-apply) [P]) LT',
    pi f\ rec-for-type P TP f
          => fixpoint-acc Name (app [Type,P]) Luno LC' LT' Acc1 RTP [TY|Facc] (Out f).

%% fixpoint-function Name Type LC LT TS TY Out
%                    i    i    i  i  i  i  o
%   Name : the name of the generator
%   Type : the type we're generating for
%   LC   : the constructors of Type
%   LT   : their types
%   TS   : the parameters of the generator
%   TY   : the type of Type
%   Out  : the recursive function we need to give to the fixpoint
fixpoint-function Name Type LC LT TS (prod N T Bo) Out :-
    fixpoint-function Name Type LC LT TS (lam N T Bo) Out.
fixpoint-function Name Type LC LT TS (lam N T Bo) (lam N T Out) :-
    pi t\ fixpoint-function-acc Name Type LC LT t T (Bo t) TS [] [] (Out t).
fixpoint-function Name Type LC LT TS _ (lam `a` Type Out) :-
    map2 LC LT (main-match Name Type TS LC LT []) MTerms,
    Out = a\ match a (lam _ Type _\ hole) MTerms.

%% fixpoint-function-acc Name Type P TP RTP TS Acc1 Acc2 Out
%                        i    i    i i  i   i  []   []   o
%   Name : the name of the description to use
%   Type : the type we're generating for, of kind * => K
%   P    : the parameter of Type
%   TP   : the type of P
%   RTP  : the type of app [Type,P]
%   TS   : the auxiliaries types of the generation, all of kind * => K
%   Acc1 : an accumulator of TS applied, should be set to []
%   Acc2 : an accumulator of the arguments of TS, should be set to []
%   Out  : the type of the derivation for Type without the quantification on P
fixpoint-function-acc Name Type LC LT P TP RTP [T|TS] Acc1 Acc2 (lam `Param` TP Out) :-
    pi t\ fixpoint-function-acc Name Type LC LT P TP RTP TS [app [T,t]|Acc1] [t|Acc2] (Out t).
fixpoint-function-acc Name Type LC LT P TP RTP [] Acc1' Acc2' (lam `FParam` TY Out) :-
    rev Acc1' Acc1, rev Acc2' Acc2,
    derive-type Name P Acc2 TP _ TY,
    map LC ((flip mk-app) [P]) LC',
    map LT ((flip do-apply) [P]) LT',
    pi f\ rec-for-type P TP f
              => fixpoint-function Name (app [Type,P]) LC' LT' Acc1 RTP (Out f).

fixpoint-function-test :-
    coq.locate "LamC" Type, Type = indt GR,
    coq.env.indt GR tt _ _ TY LC LT,
    (pi f\ (pi t\ rec-for-type t _ f)
        => fixpoint-function "eq" Type LC LT [] TY (Out f)),
    coq.say Out.

fixpoint-function-test' :-
    coq.locate "LamC" Type, Type = indt GR,
    coq.env.indt GR tt _ _ TY LC LT,
    ((pi a t t'\ phi "map" t [t'] a t')
        => fixpoint-function "map" Type LC LT [Type] TY Out),
    coq.say Out.

fixpoint-function-test'' :-
    coq.locate "LamC" Type, Type = indt GR,
    coq.env.indt GR tt _ _ TY LC LT,
    ((pi a t\ phi "other" t [] a (prod `b` t _\ prod `c` {{nat}} _\ {{bool}}))
        => fixpoint-function "other" Type LC LT [] TY Out),
    coq.say Out.

%% main-match Name Type TS LC LT Params C T Out
%             i    i    i  i  i  []     i i o
main-match Name Type TS LC LT Params C (prod N T Bo) (lam N T Out) :-
    pi x\ main-match Name Type TS LC LT [x|Params] C (Bo x) (Out x).
main-match Name Type TS LC LT Params C (lam N T Bo) (lam N T Out) :-
    pi x\ main-match Name Type TS LC LT [x|Params] C (Bo x) (Out x).
main-match Name Type TS LC LT Params' C _ Out :-
    rev Params' Params,
    abstract-constructor Type LC C Params AST,
    build-operation Name Type Type TS AST Out.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%% Building operation terms %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% get-fold-for Name Type Tp TS Out TY
%               i    i    i  i  o   o
get-fold-for Name Type Tp TS Out :-
    rec-for-type Tp _ Out.
get-fold-for Name Type Tp TS Out :-
    doConst Name Type Tp Out.
% If rec-for-type failed, we need to create and inline the term wanted
get-fold-for Name Type Tp TS Out :- !,
    fixpoint Name Tp {length TS} Out _.

%% unapply In (pr UnApp Arg)
%          i  o
% unapply takes an application and remove its last argument, returning it :
%   unapply In UnApp Arg => In =_\beta app [UnApp,Arg]
type unapply term -> pair term term -> prop.
unapply (app [X]) Out :-
    unapply X Out.
unapply (app [X,Y]) (pr X Y).
unapply (app [X|L]) (pr (app [X|L']) Arg) :-
    uncons-last L L' Arg.

unapply-test :-
    Id = (lam `a` _ x\x),
    unapply (app [app [app [Id, Id], Id]]) (pr UnApp Arg),
    coq.say UnApp,
    coq.say Arg.

%% head L X
%       i o
head [X|_] X.

%% fold-params Name Type Tp TParams TS TSParams Params
%              i    i    i  i       i  i        o
type fold-params string -> term -> term -> list term -> list term
                        -> list (list term) -> list term -> prop.
fold-params Name Type Tp [X|L] TS TSParams Params :-
    map TSParams head TSPHead,
    map TSParams (drop 1) TSPTail,
    fold-params Name Type Tp L TS TSPTail Params', !,
    find-app-for Name Type X TSPHead Fun, !,
    flatten [[X], TSPHead, [Fun], Params'] Params.
fold-params Name Type Tp [] TS _ [].

%% find-app-for Name Type Tp TS Fun
%               i    i    i  i  o
find-app-for Name Type Tp TS (app [Fun|Params]) :-
    split-app Tp (pr Hd Args),
    map TS split-app TS',
    unzip TS' TSH TST, !,
    get-fold-for Name Type Hd TSH Fun, !,
    fold-params Name Type Hd Args TSH TST Params.

%% Utilities for build-operation
type proj-sum-l term -> term -> prop.
proj-sum-l (term-sum-type T1 T2) T1.
type proj-sum-r term -> term -> prop.
proj-sum-r (term-sum-type T1 T2) T2.
type proj-pair-1 term -> term -> prop.
proj-pair-1 (term-prod-type T1 T2) T1.
type proj-pair-2 term -> term -> prop.
proj-pair-2 (term-prod-type T1 T2) T2.
type proj-con term -> term -> prop.
proj-con (term-con-type _ Tp) Tp.

%% build-operation Name Type T TS Main Phi
%                  i    i    i i  i    o
build-operation Name Type Sum TS (cinr M) Out :-
    proj-sum-r Sum Right,
    map TS proj-sum-r TR,
    build-operation Name Type Right TR M Phi,
    doInr Name Type Sum (term-con (cinr M)) Phi Out.
build-operation Name Type Sum TS (cinl M) Out :-
    proj-sum-l Sum Left,
    map TS proj-sum-l TL,
    build-operation Name Type Left TL M Phi,
    doInl Name Type Sum (term-con (cinl M)) Phi Out.
build-operation Name Type Tp TS (ccon C M) Out :-
    proj-con Tp T,
    map TS proj-con TL,
    build-operation Name Type T TL M Phi,
    doCon Name Type Tp C (term-con (ccon C M)) Phi Out.
build-operation Name Type Prod TS (cprod M1 M2) Out :-
    map TS proj-pair-1 T1,
    map TS proj-pair-2 T2,
    build-operation Name Type {proj-pair-1 Prod} T1 M1 Phi1,
    build-operation Name Type {proj-pair-2 Prod} T2 M2 Phi2,
    doPair Name Type Prod (term-con (cprod M1 M2))Phi1 Phi2 Out.
build-operation Name Type Tp TS (ctype Tp M) Out :-
    make-abstract-type Tp ATp,
    map TS make-abstract-type TA,
    build-operation Name Type ATp TA M Phi,
    doType Name Type Tp (term-con (ccon Tp M)) Phi Out.
build-operation Name Type term-unit-type _ cunit Out :-
    doUnit Name Type Out.
% if doConst fails, we need to guess what transformation should be applied
build-operation Name Type Tp TS (cvar M) (app [Fun,M]) :- !,
    find-app-for Name Type Tp TS Fun.

build-operation-test :-
    coq.locate "LamC" Type', Type = app [Type', {{nat}}],
    coq.locate "App" App, coq.locate "Var" Var,
    Term = ctype Type (cinl (ccon (app [App,{{nat}}]) (cprod
                (ctype Type (cinr (cinr (ccon (app [Var,{{nat}}]) (cvar {{0}})))))
                (ctype Type (cinr (cinr (ccon (app [Var,{{nat}}]) (cvar {{0}})))))))),
    coq.say Term, !,
    (pi f\ (pi t\ rec-for-type t _ f) => build-operation "eq" Type Type [] Term (Out f)),
    coq.say Out.

%% expand-term In Out
%              i  o
% Beta reduce all applications, match-* and lift*
type expand-term term -> term -> prop.
% Beta reduction
expand-term (app [X]) X' :- !,
    expand-term X X'.
expand-term (app [app L|L']) Out :- !,
    append L L' L'',
    expand-term (app L'') Out.
expand-term (app [(lam _ _ Bo),Y|L]) Out :-
    expand-term (app [Bo Y|L]) Out.
expand-term (app [(prod _ _ Bo),Y|L]) Out :-
    expand-term (app [Bo Y|L]) Out.
expand-term (app [X,Y|L]) Out :-
    expand-term X (lam _ _ Bo), !,
    expand-term (app [Bo Y|L]) Out.
expand-term (app [X,Y|L]) Out :-
    expand-term X (prod _ _ Bo), !,
    expand-term (app [Bo Y|L]) Out.
expand-term (app L) (app L') :- !,
    map L expand-term L'.
expand-term (lam N T Bo) (lam N T Out) :- !,
    pi x\ expand-term (Bo x) (Out x).
expand-term (prod N T Bo) (prod N T Out) :- !,
    pi x\ expand-term (Bo x) (Out x).
expand-term (match T P Brs) (match T' P Brs') :- !,
    expand-term T T',
    map Brs expand-term Brs'.
expand-term (fix Nm N Tp Bo) (fix Nm N Tp' Bo') :- !,
    expand-term Tp Tp',
    pi x\ expand-term (Bo x) (Bo' x).
% match-sum
expand-term (match-sum C L R) Out :-
    expand-term C (term-con (cinl X)), !,
    expand-term (app [L, term-con X]) Out.
expand-term (match-sum C L R) Out :-
    expand-term C (term-con (cinr X)), !,
    expand-term (app [R, term-con X]) Out.
expand-term (match-sum C _ _) _ :-
    fatal-error "Expanding match-sum with a wrongly typed constructor".
% uncon
expand-term (uncon X F) Out :-
    expand-term X (term-con (ccon C M)), !,
    expand-term (app [F, term-con M]) Out.
expand-term (uncon X F) _ :-
    fatal-error "Expanding uncon with a wrongly typed constructor".
% match-prod
expand-term (match-prod C T) Out :-
    expand-term C (term-con (cprod X Y)), !,
    expand-term (app [T,term-con X,term-con Y]) Out.
expand-term (match-prod X T) Out :-
    fatal-error "Expanding match-prod with a wrongly typed constructor".
% abstract-type
expand-term (abstract-type Tp X Fun) Out :- !,
    expand-term Tp Tp',
    get-type-information Tp' [] _ _ LC LT,
    map2 LC LT (expand-term-abstract-constructor Tp' LC LT Fun []) MTerms,
    expand-term (match X (lam _ Tp' _\ hole) MTerms) Out.
% lift1
expand-term (lift1 F X) (term-con (F (cvar C))) :- !,
    expand-term X C.
expand-term (lift1 F X) (term-con (F C)) :- !,
    expand-term X (term-con C).
% lift2
expand-term (lift2 F X Y) (term-con (F (cvar C) (cvar D))) :- !,
    expand-term X C,
    expand-term Y D.
expand-term (lift2 F X Y) (term-con (F (cvar C) D)) :- !,
    expand-term X C,
    expand-term Y (term-con D).
expand-term (lift2 F X Y) (term-con (F C (cvar D))) :- !,
    expand-term X (term-con C),
    expand-term Y D.
expand-term (lift2 F X Y) (term-con (F C D)) :- !,
    expand-term X (term-con C),
    expand-term Y (term-con D).
% Constructors
expand-term (term-con C) (term-con C') :-
    expand-constructor C C'.
% Base case
expand-term X X :- !.

%% expand-constructor In Out
%                     i  o
% Applies expand-term to all cvar
expand-constructor (cinr X) (cinr X') :-
    expand-constructor X X'.
expand-constructor (cinl X) (cinl X') :-
    expand-constructor X X'.
expand-constructor (cprod X Y) (cprod X' Y') :-
    expand-constructor X X',
    expand-constructor Y Y'.
expand-constructor (ctype Tp X) (ctype Tp' X') :-
    expand-term Tp Tp',
    expand-constructor X X'.
expand-constructor (ccon C X) (ccon C' X') :-
    expand-term C C',
    expand-constructor X X'.
expand-constructor (cvar X) (cvar X') :-
    expand-term X X'.
expand-constructor cunit cunit.

%% expand-term-abstract-constructor Type LC LT Fun Acc C TY Out
%                                   i    i  i  i   []  i i  o
%   Type : the type we're working with
%   LC   : its constructors
%   LT   : their types
%   Fun  : the function to apply at the end
%   Acc  : an accumulator for the term we're abstracting over, should be set to []
%   C    : the constructor we're abstracting for
%   TY   : its type
%   Out  : a term with the same arguments as C applying Fun to the constructor
%          associated to C with the abstracted arguments
expand-term-abstract-constructor Type LC LT Fun Acc C (prod N T Bo) (lam N T Out) :-
    pi x\ expand-term-abstract-constructor Type LC LT Fun [x|Acc] C (Bo x) (Out x).
expand-term-abstract-constructor Type LC LT Fun Acc C (lam N T Bo) (lam N T Out) :-
    pi x\ expand-term-abstract-constructor Type LC LT Fun [x|Acc] C (Bo x) (Out x).
expand-term-abstract-constructor Type LC LT Fun Acc' C _ (app [Fun, term-con AST]) :-
    rev Acc' Acc,
    abstract-constructor Type LC C Acc (ctype _ AST).

expand-term-test :-
    Term = app [(lam _ {{nat}} x\ lam _ {{nat}} y\ app [{{plus}}, x, y]), {{1}}, {{0}}],
    coq.say Term,
    expand-term Term Term',
    coq.say Term'.

expand-term-test' :-
    coq.locate "LamC" Type,
    Term = (lam _ {{Type}} A\ lam _ (app [Type,A]) x\ abstract-type (app [Type,A]) x
        (lam _ _ s1\ match-sum s1
            (lam _ _ p\ match-prod p (lam _ _ x\ lam _ _ y\ app [x,y]))
            (lam _ _ s2\ match-sum s2 (lam _ _ x\ x) (lam _ _ x\ x)))),
    coq.say Term,
    expand-term Term Term',
    coq.say Term'.

expand-term-test'' :-
    coq.locate "LamC" Type, Type = indt GR,
    coq.env.indt GR tt _ _ TY LC LT,
    (pi f\ (pi t\ rec-for-type t _ f)
        => fixpoint-function "eq" Type LC LT [] TY (Out f)), !,
    (pi f\ expand-term (Out f) (Out' f)),
    coq.say Out'.

%% cleanup-term In Out
%               i  o
% Takes a term and replace all term-con X by an appropriate interpretation of X
cleanup-term (term-con (cvar X)) X' :- !,
    cleanup-term X X'.
cleanup-term (term-con (ctype T X)) (app [C|Prms]) :- !,
    cleanup-constructor X X', !,
    concretise-constructor (ctype T X') C Prms.
cleanup-term (term-con O) _ :- !,
    fatal-error "Invalid term-con found in generated term".
cleanup-term (lam N T Bo) (lam N T' Bo') :- !,
    cleanup-term T T',
    pi x\ cleanup-term (Bo x) (Bo' x).
cleanup-term (prod N T Bo) (prod N T' Bo') :- !,
    cleanup-term T T',
    pi x\ cleanup-term (Bo x) (Bo' x).
cleanup-term (app L) (app L') :- !,
    map L cleanup-term L'.
cleanup-term (fix Nm Nn Tp Bo) (fix Nm Nn Tp' Bo') :- !,
    cleanup-term Tp Tp',
    pi x\ cleanup-term (Bo x) (Bo' x).
cleanup-term (match X F MT) (match X' F MT') :- !,
    cleanup-term X X',
    map MT cleanup-term MT'.
cleanup-term X X.

%% clean-constructor In Out
%                    i  o
% Replace cvar (term-con X) -> X
cleanup-constructor (cvar (term-con X)) X' :- !,
    cleanup-constructor X X'.
cleanup-constructor (cvar X) (cvar X') :- !,
    cleanup-term X X'.
cleanup-constructor (cinl X) (cinl X') :- !,
    cleanup-constructor X X'.
cleanup-constructor (cinr X) (cinr X') :- !,
    cleanup-constructor X X'.
cleanup-constructor (cprod X Y) (cprod X' Y') :- !,
    cleanup-constructor X X',
    cleanup-constructor Y Y'.
cleanup-constructor (ccon C X) (ccon C X') :- !,
    cleanup-constructor X X'.
cleanup-constructor (ctype Tp X) (ctype Tp X') :- !,
    cleanup-constructor X X'.
cleanup-constructor X X.

cleanup-term-test :-
    coq.locate "Tp" Type,
    fixpoint "eq" Type 0 Out _, !,
    expand-term Out Out', !,
    cleanup-term Out' Out'', !,
    coq.elaborate Out'' Bo TBo, !,
    coq.env.add-const "Tp_equal" Bo TBo _ _.

cleanup-term-test' :-
    coq.locate "LamC" Type,
    Term = (lam _ _ a\ lam _ _ b\
        term-con (ccon Type (cinr (cinl (cprod (cvar a) (cvar b)))))),
    cleanup-term Term Term',
    coq.say Term'.

cleanup-term-test'' :-
    coq.locate "MTree" Type,
    fixpoint "map" Type 1 Out _, !,
    expand-term Out Out', !,
    cleanup-term Out' Out'', !,
    coq.say Out'',
    coq.elaborate Out'' Bo TBo, !,
    coq.env.add-const "MTree_map" Bo TBo _ _.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Tests %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

proof-test :-
    coq.locate "list" List,
    derive "eq" "list" Eq TEq, !,
    coq.env.add-const "list_equal" Eq TEq _ _, !,
    fixpoint "eq-proof" List 0 Out _, !,
    expand-term Out Out', !,
    coq.say Out',
    cleanup-term Out' Out''.

