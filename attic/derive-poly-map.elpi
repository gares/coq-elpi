/* Tentative framework for derivations on polynomial types (map)             */
/* License: GNU Lesser General Public License Version 2.1 or later           */
/* ------------------------------------------------------------------------- */

% Author: Luc Chabassier

params "map" 1.
phi "map" S [Out] A Out.

doType "map" Type Tp A Phi (lift1 (ctype Tp) Phi).
doCon  "map" Type Tp C A Phi (lift1 (ccon C) Phi).
doLead "map" Type Tp Phi Phi.
doInl  "map" Type (term-sum-type S1 S2) A Phi (lift1 cinl Phi).
doInr  "map" Type (term-sum-type S1 S2) A Phi (lift1 cinr Phi).
doUnit "map" Type (term-con cunit).
doPair "map" Type (term-prod-type T1 T2) A Phi1 Phi2
    (lift2 cprod Phi1 Phi2).
type map-set string -> prop.
doConst "map" Type T Fun :-
    map-set Name, coq.locate Name T,
    NFun is Name ^ "_map",
    coq.locate NFun Fun.

derive-map Name :-
    Fun is Name ^ "_map",
    derive "map" Name Bo TBo, !,
    coq.env.add-const Fun Bo TBo _ _.


