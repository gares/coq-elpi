/* Type inference and unification                                            */
/* license: GNU Lesser General Public License Version 2.1 or later           */
/* ------------------------------------------------------------------------- */

% Entry points
pred unify-eq i:term, i:term.
pred unify-leq i:term, i:term.
pred of i:term, o:term, o:term. % of Term Type(i/o) RefinedTerm

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% Reduction %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

:before "hd-beta:end"
hd-beta (uvar as K) [A|AS] X C :- !, % auto-intro
  assert (of A TA _) "already typed",
  K = lam `hd_beta_auto` TA F, hd-beta (F A) AS X C.

:before "hd-beta-zeta:end"
hd-beta-zeta (uvar as K) [A|AS] X C :- !, % auto-intro
  assert (of A TA _) "already typed",
  K = lam `hd_beta_zeta_auto` TA F, hd-beta-zeta (F A) AS X C.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% Unification %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% invariant: hd-beta terms
% we start with ff, tt to handle symmetric cases
% NOTE: rec-calls with unify (ensured hd-beta + ff) , symmetric rules are typically !
% NOTE: asymmetric rules are not ! otherwise the flip rule is killed
% NOTE: whd are !
% names: unif X C  T D M
kind cumul type.
type eq cumul.
type leq cumul.

type unif term -> @stack -> term -> @stack -> bool -> cumul -> prop.
mode (unif i i i i i i).
:if "DBG:unif"
unif X CX Y CY D M :-
  coq.say {counter "run"} "unif" X CX "==" Y CY "(flipped?" D "cumul:" M ")", fail.

mode (swap i i i i).
type  swap bool -> (A -> B -> prop) -> A -> B -> prop.
swap tt F A B :- F B A.
swap ff F A B :- F A B.

% flexible cases
@tail-cut-if "unif:greedy" (unif (uvar V L) [] T D _ _) (!, (bind-list L {unwind T D} V)).
@tail-cut-if "unif:greedy" (unif X C (uvar V L) [] _ _) (!, bind-list L {unwind X C} V).

unif (sort (typ S1)) [] (sort (typ S2)) [] M eq  :- !, swap M coq.univ.eq S1 S2.
unif (sort (typ S1)) [] (sort (typ S2)) [] M leq :- !, swap M coq.univ.leq S1 S2.
unif (sort S1) [] (sort S2) [] _ _ :- !, ignore-failure(S1 = S2).  % FIXME
unif (indt GR1) C (indt GR2) D _ _ :- !, GR1 = GR2, unify-ctxs C D.
unif (indc GR1) C (indc GR2) D _ _ :- !, GR1 = GR2, unify-ctxs C D.

% fast path for stuck term on the right
unif X C (indt _ as T) D ff U :- !, unif T D {whd X C} tt U. % TODO:1
unif X C (indc _ as T) D ff U :- !, unif T D {whd X C} tt U. % TODO:1

% congruence rules TODO: is the of assumption really needed?
unif (lam N T1 F1) [] (lam M T2 F2) [] _ _ :- !, ignore-failure(N = M),
  unify T1 T2 eq,
  pi x\ (decl x N T1) => unify (F1 x) (F2 x) eq.
unif (prod N T1 F1) [] (prod M T2 F2) [] _ U :- !, ignore-failure(N = M),
  unify T1 T2 eq,
  pi x\ (decl x N T1) => unify (F1 x) (F2 x) U.
unif (fix N Rno Ty1 F1) B1 (fix M Rno Ty2 F2) B2 _ _ :- !, ignore-failure(N = M),
  unify Ty1 Ty2 eq,
  (pi f\ (decl f N Ty1) => unify (F1 f) (F2 f) eq),
  unify-ctxs B1 B2.
unif (match A1 R1 L1) B1 (match A2 R2 L2) B2 _ _ :- !,
  unify A1 A2 eq, unify R1 R2 eq, unify-list L1 L2, unify-ctxs B1 B2.

% congruence heuristic (same maybe-non-normal head)
unif (let N T1 B1 F1) C1 (let M T2 B2 F2) C2 _ _ :- ignore-failure(N = M),
  unify T1 T2 eq, unify B1 B2 eq, 
  (pi x\ def x N T1 B1 _ => unify (F1 x) (F2 x) eq),
  unify-ctxs C1 C2, !.
unif (const GR) C (const GR) D _ _ :- unify-ctxs C D, !.
unif X C T D _ _ :- name X, name T, X = T, unify-ctxs C D.

% 1 step reduction  TODO:1
unif (const GR) C T D M U :- unfold GR C X1 C1, !, unif X1 C1 T D M U.
unif (let N TB B F) C1 T C2 M U :- !,
  pi x\ def x N TB B _ => unif {hd-beta (F x) C1} T C2 M U.
unif (match A _ L) C T D M U :- whd-indc A GR KA, !,
  unif {match-red GR KA L C} T D M U.
unif (fix _ N _ F as X) C T D M U :- nth-stack N C LA A RA, whd-indc A GR KA, !,
  unif {fix-red F X LA GR KA RA} T D M U.
unif X C T D M U :- name X, def X _ _ V _VN, !, unif {hd-beta V C} T D M U.
  % TODO we could use _VN if nonflex
% TODO:1 turn into (if reducible then reduce1 else fully-reduce2 tt)

% symmetry
unif X C T D ff U :- !, unif T D X C tt U.

% error
% unif X C1 Y C2 _tt :- !,
%   print "Error: " {coq.term->string {unwind X C1}} "vs" {coq.term->string {unwind Y C2}}. %, halt.

% Contexts happens to be lists, so we just reuse the code
unify-list L1 L2 :- unify-ctxs L1 L2.

% the entry points of rec calls: unify unify-ctxs
mode (unify-ctxs i i).
unify-ctxs [] [].
unify-ctxs [X|XS] [Y|YS] :- unify X Y eq, !, unify-ctxs XS YS.

unify A B C :- unif {hd-beta A []} {hd-beta B []} ff C.

%%%%%% entry points for clients %%%%%%%
unify-eq  X Y :- unify X Y eq.
unify-leq X Y :- unify X Y leq.
unify-list-eq L1 L2 :- unify-list L1 L2.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%% Flexible case %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Binding a list of terms (delift in Matita, invert subst in Coq) 

% We use a keyd discipline, i.e. we only bind terms with a rigid head
mode (key i).
key (const _).
key (indt _).
key (indc _).
key C :- name C.

type bind-list list term -> term -> A -> prop.
mode (bind-list i i o).
bind-list [] T T' :- bind T T1, T1 = T'.
bind-list [app [C| AS] |VS] T R :- key C, !,
  pi x\ (pi L X\ @tail-cut-if "unif:greedy" (bind (app[C|L]) X) (unify-list-eq L AS, X = x)) => bind-list VS T (R x).
bind-list [C|VS] T R :- key C, def C _ _ V _, key V, !,
  pi x\ @tail-cut-if "unif:greedy" (bind C x) true => 
        @tail-cut-if "unif:greedy" (bind V x) true => 
        bind-list VS T (R x).
bind-list [C|VS] T R :- key C, !,
  pi x\ @tail-cut-if "unif:greedy" (bind C x) true => bind-list VS T (R x).
bind-list [ _ |VS] T R :- !, pi x\ bind-list VS T (R x).

% CAVEAT: (app FLEX), (match _ _ FLEX) are not terms!
type bind term -> term -> prop.   %@log (bind Term BoundTerm).
mode (bind i o).
bind X Y :- name X, X = Y, !.
bind X Y :- name X, def X _ _ T _, !, bind T Y.
bind (const _ as C) C :- !.
bind (indc _ as C) C :- !.
bind (indt _ as C) C :- !.
bind (sort _ as C) C :- !.
bind (fix N Rno Ty F) (fix N Rno Ty1 F1) :- !,
  bind Ty Ty1, pi x\ decl x N Ty => bind (F x) (F1 x).
bind (match T Rty B) X :- !,
  bind T T1, bind Rty Rty1, map B bind B1, X = (match T1 Rty1 B1).
bind (app L) X :- !, map L bind L1, X = app L1.
bind (lam N T F) (lam N T1 F1) :- !,
  bind T T1, pi x\ decl x N T => bind (F x) (F1 x).
bind (let N T B F) (let N T1 B1 F1) :- !,
  bind T T1, bind B B1, pi x\ def x N T B _ => bind (F x) (F1 x).
bind (prod N T F) X :- !,
  bind T T1, (pi x\ decl x N T => bind (F x) (F1 x)), X = (prod N T1 F1).
bind (uvar M L) W :- map L bind L1, mk-app M L1 W.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Type checking %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%% eat-prod head head-ty args-done todo-args refined-app refined-ty %%%%%%%%

mode (eat-prod i i i o o o).

:if "DBG:of" eat-prod [] Hd Prod Adone Res ResTy :-
coq.say "eat-prod" Hd Adone "==" Res ";" Prod "==" ResTy, fail.

eat-prod [] Hd Prod Adone Res ResTy :- !,
  (unify-eq Res {mk-app Hd {rev Adone}}),
  (unify-leq Prod ResTy).

mode (bidir-app i i i i).
:name "of:bidirectional-app"
bidir-app _ _ _ _.
saturate-dummy (prod _ _ F) R :- pi x\ saturate-dummy (F x) R.
saturate-dummy X X.  

pred ensure-prod i:term, o:term, o:(term -> term).
ensure-prod (prod _ S T) S T :- !.
ensure-prod (uvar as X) S T :- !, of (prod `ensure_prod` S T) _ R, unify-eq R X.
ensure-prod X S T :-
  whd X [] Hd Args,
  ((Hd = prod _ _ _, Args = []) ; var Hd),
  ensure-prod {mk-app Hd Args} S T.

% XXX why not unif?
eat-prod [A|AS] Hd Prod Adone Res ResTy :-
  bidir-app Hd Prod Adone ResTy,
  ensure-prod Prod Src Tgt,
  of A Src ResA,
  eat-prod AS Hd (Tgt ResA) [ResA|Adone] Res ResTy.

:if "DBG:of"
of X Tx _ :- coq.say {counter "run"} "of" X Tx, fail.

of X Tx R :- name X, (decl X _ T ; def X _ T _ _), unify-leq T Tx, R = X.

of (lam N _S F) LamTy (lam N S2 F2) :-
  %of (prod N S (s\ hole)) (sort _U) (prod M S2 T ),
  unify-leq (prod _ S2 T) LamTy,
  pi x\ decl x N S2 => of (F x) (T x) (F2 x).

of (app [Hd|Args]) TyApp App :-
  of Hd Prod Hd1, (eat-prod Args Hd1 Prod [] App TyApp).

of (prod N S F) ProdTy (prod N ResS ResF) :-
  pts U1 U2 U,
  of S (sort U1) ResS,
  (pi x\ decl x N ResS => of (F x) (sort U2) (ResF x)),
  unify-leq (sort U) ProdTy.

of (match T Rty Bs) ResRtyInst (match ResT ResRty ResBs) :-
  of T TyT ResT,
  % T : TyT = (indt GR) LArgs RArgs, and (indt GR) : Ty
  safe-dest-app TyT (indt GR) Args,
  coq.env.indt GR _IsInd Lno _Luno Ty Kn Ks, % TODO LUno
  split-at Lno Args LArgs RArgs, % TODO: not a failure, just type err
  % fix LArgs on ind ty and constructors ty
  subst-prod LArgs Ty TyLArgs,
  map Ks (subst-prod LArgs) KsLArgs,
  % Rty skeleton (uknown ending) = lam rargs, lam e : indt largs rargs, ?
  mk-rty [] {mk-app (indt GR) LArgs} TyLArgs ResRtyRaw, 
  of ResRtyRaw _ ResRty, unify-eq Rty ResRty,
  % Rty must type each branch
  map2 KsLArgs Kn (mk-bty Rty Lno) BsTy,
  map2 Bs BsTy of ResBs,
  % Outside type
  unify-leq {mk-app ResRty {append RArgs [ResT]}} ResRtyInst.

of (let N Ty Bo F) TyFx (let N ResTy ResBo ResF) :-
  of Ty (sort _) ResTy, of Bo ResTy ResBo, of _ ResTy ResBoNorm,
  pi x\ def x N ResTy ResBo ResBoNorm => of (F x) TyFx (ResF x).

of (fix N Rno Ty BoF) ResTy (fix N Rno RTy ResBoF) :-
  of Ty (sort _) RTy,
  unify-leq RTy ResTy,
  pi f\ decl f N RTy => of (BoF f) ResTy (ResBoF f).
 
of (sort prop) (sort (typ U)) (sort prop) :-
  if (var U) (coq.univ.new [] U) true.
of (sort (typ T) as X) (sort S) X :-       % XXX TODO: unif
  coq.univ.sup T T+1, 
  if (var S) (S = typ T+1)
     (if (S = prop) false
         (S = typ U, coq.univ.leq T+1 U)).

of (indt GR as X) T X  :- coq.env.indt GR _ _ _ T1 _ _, unify-leq T1 T.
of (indc GR as X) T X  :- coq.env.indc GR _ _ _ T1,     unify-leq T1 T.
of (const GR as X) T X :- coq.env.const GR _ T1,        unify-leq T1 T.

of (uvar as X) T Y :- var Y, !, X = Y, evar Y T Y.
of (uvar as X) T Y :- !, of Y T X.
of hole T X :- !, evar X T X.

:name "refiner-assign-evar"
:before "default-assign-evar"
evar X Ty S :- !, of X Ty S.

pred coerce     o:term, o:term, o:term, o:term.
pred coerced    i:term, i:term, i:term, o:term.
pred coerceible i:term, o:term, i:term, o:term.
of X T R :- get-option "of:coerce" tt, not (var T), of X XT Y, coerced XT T Y R.

% Uniqueness of typing
utc [] T1 [] T2 (unify-eq T1V T2) :- !, copy T1 T1V.
utc [N|NS] T1 [V|VS] T2 C :- !, copy N V => utc NS T1 VS T2 C.
utc [] T1 VS T2 C :- !, utc [] {subst-prod VS T1} [] T2 C. % FIXME: reduction
utc [_|NS] (prod _ _ F) [] T2 C :- !,                      % FIXME: reduction
  assert (pi x\ F x = F1) "restriction bug", utc NS F1 [] T2 C.

% This could be done in ML
canonical? [].
canonical? [N|NS] :- name N, not(mem NS N), canonical? NS.

constraint evar decl def pp read-evar {
 rule (E1 : G1 ?- evar (uvar K L1) T1 _) % canonical
    \ (E2 : G2 ?- evar (uvar K L2) T2 _) % actual
    | (canonical? L1, utc L1 T1 L2 T2 Condition,
        coq.say "CHR: Uniqueness of typing of" K,
        coq.say E1 "|>" G1 "|-" T1,
        coq.say E2 "|>" G2 "|-" T2,
        coq.say E2 "|>" G2 "|-" Condition
       )
  <=> (E2 : G2 ?- Condition).
}


% typing match %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
type mk-rty list term -> term -> term -> term -> prop. 
mk-rty ARGS HD (prod N S T) (lam N S F) :- !,
  pi x\ mk-rty [x|ARGS] HD (T x) (F x).
mk-rty ARGS HD _ (lam _ IndApp _FRESH) :-
  mk-app HD {rev ARGS} IndApp.

type mk-bty term -> int -> term -> term -> term -> prop.
mk-bty Rty Lno (prod N S T) Ki (prod N S B) :- !,
  pi x\ mk-bty Rty Lno (T x) Ki (B x).
mk-bty Rty Lno T Ki AppRtyNorm :-
  safe-dest-app T (indt _) Args,
  split-at Lno Args LArgs RArgs,
  mk-app Rty {append RArgs [{mk-app Ki {append LArgs RArgs}}]} AppRty,
  hd-beta-zeta-reduce AppRty AppRtyNorm.

% PTS sorts %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

mode (pts i i o).

pts  prop     prop     prop.
pts (typ U)   prop     prop :- if (var U) (coq.univ.new [] U) true.
pts (typ T1) (typ T2) (typ M) :- coq.univ.max T1 T2 M.
pts  prop    (typ T2) (typ T2).

pts (uvar    as X) (prop  as Y) R :- coq.univ.new [] U, X = typ U, pts X Y R.
pts (prop  as X) (uvar    as Y) R :- coq.univ.new [] U, Y = typ U, pts X X R.
pts (uvar    as X) (typ _ as Y) R :- coq.univ.new [] U, X = typ U, pts X Y R.
pts (typ _ as X) (uvar    as Y) R :- coq.univ.new [] U, Y = typ U, pts X Y R.
pts (uvar    as X) (uvar    as Y) R :-
  coq.univ.new [] U, X = typ U,
  coq.univ.new [] V, Y = typ V,
  pts X Y R.
% vim:set ft=lprolog spelllang=:
