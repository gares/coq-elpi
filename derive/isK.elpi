/* Derive a function "isK t -> true" iif t is "K .." for K constructor       */
/* license: GNU Lesser General Public License Version 2.1 or later           */
/* ------------------------------------------------------------------------- */

namespace derive.isK {

ty _ _ _ {{ bool }}.

% if the branch of the match (corresponding to KParams) is the one
% for K (the constructor we are generating the isK function for) we say
% true, else we say false.
branch K KParams _ _ _ {{ true }} :- safe-dest-app KParams K _, !.
branch _ _ _ _ _ {{ false }}.

body K _ Vars Tys R :-
  last Vars X,
  last Tys TX,
  build-match X TX ty (branch K) R.

main-K Prefix Ity Arity (indc GRK as K) Clause :-
  bind-ind-arity Ity Arity (body K) T,
  Name is Prefix ^ {coq.gr->id GRK},
  coq.env.add-const Name T _ _ IsK,
  Clause = isK-db GRK IsK.

main I Prefix Clauses :-
  coq.locate I T,
  assert (T = indt GR) "derive.isK: Not an inductive type",
  coq.env.indt GR _ _ _ Arity Kn _,
  map Kn (main-K Prefix T Arity) Clauses,
  forall Clauses (c\ coq.elpi.accumulate "derive.isK.db" (clause _ _ c)).

}

% vim: set spelllang=:
