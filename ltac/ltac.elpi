/* elpi-ltac: building blocks for tactics                                    */
/* license: GNU Lesser General Public License Version 2.1 or later           */
/* ------------------------------------------------------------------------- */

pred read-evar i:term, o:goal.
constraint evar pp decl def read-evar {
  rule (E1 : Ctx ?- evar (uvar K _ as X) Ty RX)
     \ (E2 : read-evar (uvar K _) (uvar _ L as G))
     | (forall L name, build-goal Ctx X Ty {rev L} Ctx Goal)
    <=> (E2 : G = Goal).
}

build-goal [] (uvar L S) T _ Ctx (goal Ctx1 (uvar L S1) T1 []) :-
  map S copy S1, copy T T1,
  map Ctx copy-ctx-item Ctx1.
build-goal [decl N _ _ |C] Uv Ty [V|L] Ctx R :-
  copy N V => build-goal C Uv Ty L Ctx R.
build-goal [def N _ _ _ _ |C] Uv Ty [V|L] Ctx R :-
  copy N V => build-goal C Uv Ty L Ctx R.

type nabla (term -> goal) -> goal.
pred distribute i:(term -> list goal), o:list goal.
distribute (_\ []) [].
distribute (x\ [X x| XS x]) [nabla X|R] :- distribute XS R.

macro @tactic :- (goal -> (list goal -> prop)).

pred apply i:list goal, i:@tactic , o:list goal.
apply [G|Gs] Tac O :-
  enter G Tac O1, apply Gs Tac O2, append O1 O2 O.
apply [] _ [].

pred enter i:goal, i:@tactic, o:list goal.
enter (nabla G) T O :- (pi x\ enter (G x) T (NG x)), distribute NG O.
enter (goal _ _ _ _ as G) T O :- T G O.

pred collect-goals i:term, o:list goal. %@log (collect-goals T GS).
collect-goals (uvar as X) [G] :- declare_constraint (read-evar X G) [X].
collect-goals (app L) GS :- map L collect-goals GSS, flatten GSS GS.
collect-goals (lam _ T F) GS :-
  collect-goals T GT,
  (pi x\ collect-goals (F x) (GF x), distribute GF GSF),
  append GT GSF GS.
collect-goals (prod _ T F) GS :-
  collect-goals T GT,
  (pi x\ collect-goals (F x) (GF x), distribute GF GSF),
  append GT GSF GS.
collect-goals (let _ T B F) GS :-
  collect-goals T GT,
  collect-goals B GB,
  (pi x\ collect-goals (F x) (GF x), distribute GF GSF),
  append {append GT GB} GSF GS.
collect-goals (indc _) [].
collect-goals (indt _) [].
collect-goals (const _) [].
collect-goals (sort _) [].
collect-goals (fix _ _ Ty Bo) GS :-
  collect-goals Ty GT,
  (pi f\ collect-goals (Bo f) (GB f), distribute GB GF),
  append GT GF GS.
collect-goals (match T P L) GS :-
  collect-goals T GT,
  collect-goals P GP,
  map L collect-goals GLL, flatten GLL GL,
  append GT {append GP GL} GS.
collect-goals N [] :- name N.

% XXX the term is type checked twice, of better first elaborated then
% assigned (hence re-checked)
pred refine i:term, i:goal, o:list goal.
refine T (goal Ctx Ev Ty _) GS :-
  Ctx => of T Ty R, Ev = R, collect-goals Ev GS1, !, GS = GS1.

pred assumption i:goal, o:list goal.
assumption (goal Ctx Ev _ _) [] :-
  exists Ctx (x\ (x = decl Ev _ _ ; x = def Ev _ _ _ _)).

pred constructor i:goal, o:list goal.
constructor (goal Ctx _ Ty _ as G) GS :- do! [
  Ctx => whd Ty [] (indt GR) _,
  coq.env.indt GR _ _ _ _ Ks Kt,
  exists2 Ks Kt (k\ t\ sigma P\
    Ctx => saturate t k P,
    refine P G GS)
].

pred intro i:@name, i:goal, o:list goal.
intro N G GS :- refine (lam N hole x\ hole) G GS.

pred saturate i:term, i:term, o:term.
saturate Ty T O :- whd Ty [] (prod _ _ Tgt) [], !, mk-app T [hole] R, pi x\ saturate (Tgt x) R O.
saturate _ X X.

pred try i:@tactic, i:goal, o:list goal.
try T G GS :- enter G T GS.
try _ G [G].

pred repeat i:@tactic, i:goal, o:list goal.
repeat T G GS :- enter G T GS1, apply GS1 (repeat T) GS.
repeat _ G [G].

pred repeat! i:@tactic, i:goal, o:list goal.
repeat! T G GS :- enter G T GS1, !, apply GS1 (repeat T) GS.
repeat! _ G [G].

pred or i:list @tactic, i:goal, o:list goal.
or TL G GS :- exists TL (t\ enter G t GS).

pred thenl i:list @tactic, i:goal, o:list goal.
thenl [] G [G].
thenl [T|Ts] G GS :- enter G T NG, apply NG (thenl Ts) GS.

% vim:set ft=lprolog spelllang=:

